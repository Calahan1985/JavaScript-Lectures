//1. Написать функцию, которая выполнит цикл от X до Y и вернёт сумму всех чисел между X и Y включительно.
function forSummator(x, y) {
	
};

//2. Написать функцию, которая принимает 3 аргумента Х, который будет шагом цикла, Y, который будет 
//начальным значением и Z, который будет конечным значением цикла. Функция должна будет перемножить 
//и вернуть все положительные числа.
function positiveMultiplier(x, y, z) {
	
};

//3. Написать функцию которая принимает в себя массив числел array и возвращает сумму всех чисел в 
//этом массив.
function arraySummator(array) {
	
};

//4. Написать функцию которая принимает в себя массив array и возвращает одну строку из всех данных 
//с типом "string".
function arrayToConcatString(array) {
	
};

//5. Написать функцию которая принимает в себя матрицу типа 
//[
//   [1, 2, 3],
//   [4, 5, 6],
//   [7, 8, 9]
//]
//и возвращает позицию числа 5(общее количество шагов до этого числа), числа в массиве могут быть 
//в производном порядке, после нахождения числа 5, цикл должен прерваться.
function getPositionOfFive(matrix) {
	
};

//6. Написать функцию, которая вернёт массив из всех непарных чисел от Х до Y.
function getArrayOfOdds(х, y) {
	
};

//7. Написать функцию, которая выполнит цикл от 1 до х и вернёт сумму  всех чисел Фибоначчи в этом 
//цикле.Числа Фибоначчи это математический ряд в котором каждое следующее число является суммой 2х 
//предыдущих. Пример: 1, 2, 3, 5, 8, 13...
function summOfFibonachi(x) {
	
};

//8. Написать функцию, которая принимает 3 аргумента Х массив, случайных значений, Y, который будет 
//типом данных, которые мы хотим получить и Z, который будет максимальной длинной возвращаемого массива. 
//Функция должна будет вернуть новый массив, в который входят только те значения которые мы указали в 
//параметре Y, нужно учитывать особенности типов, и если указать array, то возвращать ТОЛЬКО массивы, 
//то же верно и для других типов данных.
function getElementsByType(x, y, z) {
	
};

//9. Написать функцию, которая "разберёт" переданный массив array на 2 новых, в первом будут все строки, 
//а во втором данные остальных типов, а потом вернёт объект в котором все строки станут ключами, а 
//остальные типы данных значениями, если значений будет больше, то лишние игнорируются, а если больше 
//строк, то значение всех лишних ключей должно быть null.
function arrayToObject(array) {
	
};












